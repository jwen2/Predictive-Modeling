accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
#Reg Both
reg_both<-step(reg_all, direction='both')
summary(reg_both)
PredBoth<-predict(reg_both,validation)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = (Reg_Data$acceleration[i])^1/3
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = log(Reg_Data$weight[i])
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
#Reg Both
reg_both<-step(reg_all, direction='both')
summary(reg_both)
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = (Reg_Data$acceleration[i])^1/3
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = (Reg_Data$acceleration[i])^1/3
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = 1/(Reg_Data$weight[i])
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = 1/(Reg_Data$weight[i])
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
#Reg Both
reg_both<-step(reg_all, direction='both')
summary(reg_both)
PredBoth<-predict(reg_both,validation)
accuracy(PredBoth,validation$mpg) #accuracy measures of PredBoth over validation dataset
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = 1/(Reg_Data$weight[i])
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
#Reg Both
reg_both<-step(reg_all, direction='both')
summary(reg_both)
PredBoth<-predict(reg_both,validation)
accuracy(PredBoth,validation$mpg) #accuracy measures of PredBoth over validation dataset
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
#Reg Both
reg_both<-step(reg_all, direction='both')
summary(reg_both)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
#Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
accuracy(PredBackward,validation$mpg) #accuracy measures of PredBackward over validation dataset
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
row = nrow(Reg_Data) #takes the number of rows from the data
trainindex = sample(row, 280, replace=FALSE) #sets training index
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
#Forward Regression Model
reg_forward = step(reg_null, scope=list(upper=reg_all), direction='forward')
summary(reg_forward)
PredForward<-predict(reg_forward,validation)
accuracy(PredForward,validation$mpg) #accuracy measures of PredForward over validation dataset
#Backward Regression Model
reg_backward = step(reg_all, direction='backward')
summary(reg_backward)
PredBackward<-predict(reg_backward,validation)
install.packages("leaps")
library('leaps')
exhaustive = regsubsets(mpg~., data=Training, nbest=1, nvmax=10, method="exhaustive")
exhaustive_summary= summary(exhaustive)
exhaustive_summary$which
exhaustive_summary$adjr2
exhaustive_summary$bic
best_adj_rsq = which.max(exhaustive_summary$adjr2)
best_bic = which.min(exhaustive_summary$bic)
coef(exhaustive, best_adj_rsq)
accuracy(coef,validation$mpg)
which.max()
reg_all = lm(mpg~new_displacement.,Training)
reg_all = lm(mpg~ new_displacement,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
for (i in 1:nrow(Reg_Data))
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
exhaustive = regsubsets(mpg~., data=Training, nbest=1, nvmax=10, method="exhaustive")
exhaustive_summary= summary(exhaustive)
exhaustive_summary$which
exhaustive_summary$adjr2
exhaustive_summary$bic
best_adj_rsq = which.max(exhaustive_summary$adjr2)
best_bic = which.min(exhaustive_summary$bic)
coef(exhaustive, best_adj_rsq)
Reg_Data = Combined_Data[,-c(1:2)]  #Data set that we are using
{
Reg_Data$new_displacement[i] = 1/(Reg_Data$displacement[i])
}
for (i in 1:nrow(Reg_Data))
Reg_Data = Reg_Data[,-3]
for (i in 1:nrow(Reg_Data))
{
Reg_Data$horsepower[i] = log10(Reg_Data$horsepower[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$acceleration[i] = sqrt(Reg_Data$acceleration[i])
}
for (i in 1:nrow(Reg_Data))
{
Reg_Data$weight[i] = (Reg_Data$weight[i])^2
}
Reg_Data = Reg_Data[,-2] #remove cylinder because it is a bad predictor
Reg_Data = Reg_Data[,-6]
plot(Reg_Data)
set.seed(12345)
trainindex = sample(row, 280, replace=FALSE) #sets training index
row = nrow(Reg_Data) #takes the number of rows from the data
Training = Reg_Data[trainindex,] #Training Data
validation = Reg_Data[-trainindex,] #Validation Data
library('forecast') #We use this package for the 'accuracy' function
#Regular Regression Model
reg_all = lm(mpg~.,Training)
summary(reg_all)
PredBase<-predict(reg_all,validation)
accuracy(PredBase,validation$mpg)
reg_null = lm(mpg~1,Training) #base intercept model
summary(reg_null)
